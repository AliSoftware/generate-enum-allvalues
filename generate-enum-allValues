#!/usr/bin/xcrun -sdk macosx swift

import Foundation

private let ProtocolName = "CasesEnumerable"

typealias JSON = Dictionary<String, Any>

private class EnumDef {
  let name: String
  var cases: [String] = []
  init(name: String) {
    self.name = name
  }
  var allValuesExtensionDefinition: String {
    let list = cases.map({ ".\($0)" }).joined(separator: ", ")
    return "extension \(name) {\n  static let allValues: [\(name)] = [\(list)]\n}"
  }
}

private func parseSubstructure(dict: JSON, namespaces: [String], currentEnum: EnumDef?) {
  // Extract some key properties of the current substructure
  let kind = dict["key.kind"] as? String
  let substructs = dict["key.substructure"] as? [JSON]
  let name = dict["key.name"] as? String
  let conforms = (dict["key.inheritedtypes"] as? [JSON])?.filter({ $0["key.name"] as? String == ProtocolName }).isEmpty == false

  // Build the full-qualified name
  var fqNames = namespaces
  if let name = name { fqNames.append(name) }

  if kind == "source.lang.swift.decl.enum", conforms, let substructs = substructs {
    // Start of an enum, parse its content (substructures)
    let newEnumDef = EnumDef(name: fqNames.joined(separator: "."))
    substructs.forEach { parseSubstructure(dict: $0, namespaces: fqNames, currentEnum: newEnumDef) }
    // Then print the parsed data in stdout
    print(newEnumDef.allValuesExtensionDefinition)
  } else if let currentEnum = currentEnum, kind == "source.lang.swift.decl.enumelement", let caseName = name {
    // Encoutered an enum case, add it to the current enum being parsed
    currentEnum.cases.append(caseName)
  } else if let substructs = substructs {
    // Just a non-enum, non-case substructure, recurse into it to search for possible deeper enums
    substructs.forEach { parseSubstructure(dict: $0, namespaces: fqNames, currentEnum: currentEnum) }
  }
}



// MARK: Main

do {
  let inputData: Data
  if let file = CommandLine.arguments.dropFirst().first {
    inputData = try Data(contentsOf: URL(fileURLWithPath: file))
  } else {
    inputData = FileHandle.standardInput.readDataToEndOfFile()
  }

  guard let json = try JSONSerialization.jsonObject(with: inputData) as? JSON else {
    print("Unexpected JSON format")
    exit(1)
  }
  parseSubstructure(dict: json, namespaces: [], currentEnum: nil)
} catch {
  print("Unable to read input file: \(error)")
  exit(2)
}
